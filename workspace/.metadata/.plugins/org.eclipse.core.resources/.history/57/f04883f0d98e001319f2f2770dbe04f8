package com.smart.taskbar;


import android.app.Service;
import android.content.Intent;
import android.graphics.PixelFormat;
import android.os.IBinder;
import android.os.SystemClock;
import android.util.Log;
import android.view.Gravity;
import android.view.MotionEvent;
import android.view.View;
import android.view.WindowManager;
import android.view.View.OnTouchListener;
import android.widget.Button;
import android.widget.Toast;

public class HUD extends Service implements OnTouchListener {
	
	long down_time_start;
	long down_time_end;
	String name = "";
	int count = 0;
	WindowManager.LayoutParams correct_peram = null;
	
    Button mButton;
    @Override
    public IBinder
    onBind(Intent intent) {
        return null;
    }

    @Override
    public void onCreate() {
        super.onCreate();
        count = 0;//dont think i need this
        //mView = new HUDView(this);
        mButton = new Button(this);
        Toast.makeText(this,"HUD starting up!", Toast.LENGTH_SHORT).show();
        mButton.setText("Overlay button");
        mButton.setOnTouchListener(this);
        
        WindowManager.LayoutParams params = new WindowManager.LayoutParams(
        
		        WindowManager.LayoutParams.WRAP_CONTENT,
		        WindowManager.LayoutParams.WRAP_CONTENT,
		        WindowManager.LayoutParams.TYPE_PHONE, // chaned to phone 2/4/14 , from system overlay
		        //WindowManager.LayoutParams.TYPE_SYSTEM_OVERLAY,
		        WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL
		        | WindowManager.LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH | 
		        WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE, PixelFormat.TRANSLUCENT);
        		//above is the test

        
        
        //params.gravity = Gravity.RIGHT | Gravity.TOP;
        params.gravity = Gravity.FILL; //trying this out prob need unhide above and delete
        //this will make the whole window give correct cords for the touch event, it jsut
        //doesnt let anything else happen, cant open apps etc.
        params.setTitle("Load Average");
        WindowManager wm = (WindowManager) getSystemService(WINDOW_SERVICE);
        wm.addView(mButton, params);
        correct_peram = params; //save this for use in on touch
        
        
      
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        if(mButton != null)
        {
            ((WindowManager) getSystemService(WINDOW_SERVICE)).removeView(mButton);
            mButton = null;
        }
    }

	
	public boolean onTouch(View v, MotionEvent event) {
		
		count+=1;
		
		//Toast.makeText(this, " working? "
        //		, Toast.LENGTH_SHORT).show();

		int action_type_int = event.getActionMasked(); //int constant for motion type, 1 is motion down etc.
		String action_type = ""; //motion down, motion up etc. defined by int constants in switch below

		//below will always say touch outside if i don't press the actual overlay button,
		//i need to make it cover the whole screen and fully transperent.
		if (action_type_int == 0){action_type = "Touch Down";}
		else if((action_type_int == 1)){action_type = "Touch Up";}
		else if((action_type_int == 2)){action_type = "Touch Move";}
		else if((action_type_int == 4)){action_type = "Touch Outside";}
		else if((action_type_int == 8)){action_type = "Touch Scroll";}
		else{action_type = "Touch Unknown";}
		
		if (action_type == "Touch Down"){
			down_time_start = //event.getDownTime();
					SystemClock.elapsedRealtime();
		}
		if (action_type == "Touch Up"){
			down_time_end = SystemClock.elapsedRealtime();
		}
	
		int pointer_index = event.getActionIndex(); //location where event above occured
		int pointer_id = event.getPointerId(pointer_index); //pointer id of the pointer_index
		float x_cord = event.getX(pointer_index); 
		float y_cord = event.getY(pointer_index);
		//float x_cord = event.getRawX(); 
		//float y_cord = event.getRawY();
		//float x_cord = event.getAxisValue (event.AXIS_X);
		//float y_cord = event.getAxisValue (event.AXIS_Y);
		
        //Toast.makeText(this,"Overlay button event", Toast.LENGTH_SHORT).show();
		if (action_type == "Touch Down"){
			Toast.makeText(this,  action_type + " at{" + x_cord + "," + y_cord + "}" 
        		, Toast.LENGTH_SHORT).show();
		}
		else if (action_type == "Touch Up"){
			String press_time = "ShortPress";
			if (down_time_end - down_time_start >= 8000){System.exit(0);}
			if (down_time_end - down_time_start >= 1000){press_time = "LongPress";} //pressed screen for a sec or more, = longpress
			Toast.makeText(this,down_time_end - down_time_start + press_time + action_type + " at{" + x_cord + "," + y_cord + "}" 
        		, Toast.LENGTH_SHORT).show();
			
		}
		else if (action_type == "Touch Outside"){
			Toast.makeText(this,action_type + " at{" + x_cord + "," + y_cord + "}" 
	        		, Toast.LENGTH_SHORT).show();
		}
        Log.i("TOUCHHHHHHHHHHHH", " you touched me up in this");
        
        
        WindowManager wm = (WindowManager) getSystemService(WINDOW_SERVICE);
        /*
        if (count%2 == 1){
        	correct_peram.gravity = Gravity.NO_GRAVITY;
            correct_peram.gravity = Gravity.RIGHT | Gravity.TOP;
            //wm.removeView(mButton);
            //wm.addView(mButton, correct_peram);
            wm.updateViewLayout(mButton, correct_peram);
        	onTouch(mButton, event);
        }
        else{
        	correct_peram.gravity = Gravity.NO_GRAVITY;
            correct_peram.gravity = Gravity.FILL;
            //wm.removeView(mButton);
            //wm.addView(mButton, correct_peram);
            wm.updateViewLayout(mButton, correct_peram);
        }
        */
        
        //focusSearch(int direction)
        
        
	
		return true;
		
		
	}
    
    
}




/*
import android.R;
import android.annotation.SuppressLint;
import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.PixelFormat;
import android.os.IBinder;
import android.util.Log;
import android.view.Gravity;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnTouchListener;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.widget.Toast;

public class HUD extends Service {
    HUDView mView;

    @Override
    public void onCreate() {
        super.onCreate();   

        Toast.makeText(getBaseContext(),"onCreate", Toast.LENGTH_LONG).show();

        final Bitmap kangoo = BitmapFactory.decodeResource(getResources(),
                R.drawable.logo_l);


        WindowManager.LayoutParams params = new WindowManager.LayoutParams(
                kangoo.getWidth(), 
                kangoo.getHeight(),
                WindowManager.LayoutParams.TYPE_SYSTEM_ALERT,
                WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE
                |WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL
                |WindowManager.LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH,
                 PixelFormat.TRANSLUCENT);






        params.gravity = Gravity.LEFT | Gravity.BOTTOM;
        params.setTitle("Load Average");
        WindowManager wm = (WindowManager) getSystemService(WINDOW_SERVICE);



        mView = new HUDView(this,kangoo);

        mView.setOnTouchListener(new OnTouchListener() {


            @Override
            public boolean onTouch(View arg0, MotionEvent arg1) {
                // TODO Auto-generated method stub
                //Log.e("kordinatlar", arg1.getX()+":"+arg1.getY()+":"+display.getHeight()+":"+kangoo.getHeight());
                if(arg1.getX()<kangoo.getWidth() & arg1.getY()>0)
                {
                 Log.d("tklad", "touch me");
                }
                return false;
            }
             });


        wm.addView(mView, params);



        }



    @Override
    public IBinder onBind(Intent arg0) {
        // TODO Auto-generated method stub
        return null;
    }

}



@SuppressLint("DrawAllocation")
class HUDView extends ViewGroup {


    Bitmap kangoo;

    public HUDView(Context context,Bitmap kangoo) {
        super(context);

        this.kangoo=kangoo;



    }


    protected void onDraw(Canvas canvas) {
        //super.onDraw(canvas);


        // delete below line if you want transparent back color, but to understand the sizes use back color
        canvas.drawColor(Color.BLACK);

        canvas.drawBitmap(kangoo,0 , 0, null); 


        //canvas.drawText("Hello World", 5, 15, mLoadPaint);

    }


    protected void onLayout(boolean arg0, int arg1, int arg2, int arg3, int arg4) {
    }

    public boolean onTouchEvent(MotionEvent event) {
        //return super.onTouchEvent(event);
       // Toast.makeText(getContext(),"onTouchEvent", Toast.LENGTH_LONG).show();

        return true;
    }
}
*/
