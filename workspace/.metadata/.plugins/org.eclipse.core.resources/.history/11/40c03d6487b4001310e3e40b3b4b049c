package alarmpack;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URL;

import com.rakesh.alarmmanagerexample.R;

import android.media.AudioManager;
import android.media.Ringtone;
import android.media.RingtoneManager;
import android.net.Uri;
import android.os.Bundle;
import android.app.Activity;
import android.content.Context;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.EditText;
import android.widget.Toast;
import android.support.v4.app.NavUtils;

public class AlarmManagerActivity extends Activity {

	public Ringtone r;
	private AlarmManagerBroadcastReceiver alarm;
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_alarm_manager);
        alarm = new AlarmManagerBroadcastReceiver();
        Uri notification = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);
        r = RingtoneManager.getRingtone(getApplicationContext(), notification);
        AudioManager mgr=null;
        mgr=(AudioManager) getSystemService(Context.AUDIO_SERVICE);
    }
    
    public static Ringtone getRingtone(Context context){
        Uri alarm_ring = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_ALARM);
        return RingtoneManager.getRingtone(context, alarm_ring);
    }
    

    
    @Override
	protected void onStart() {
		super.onStart();
	}

    public void startRepeatingTimer(View view) {
    	Context context = this.getApplicationContext();
    	if(alarm != null){
    		alarm.SetAlarm(context);
    	}else{
    		Toast.makeText(context, "Alarm is null", Toast.LENGTH_SHORT).show();
    	}
    }
    
    public void cancelRepeatingTimer(View view){
    	Context context = this.getApplicationContext();
    	if(alarm != null){
    		alarm.CancelAlarm(context);
    	}else{
    		Toast.makeText(context, "Alarm is null", Toast.LENGTH_SHORT).show();
    	}
    }
    
    public void onetimeTimer(View view) throws IOException{
    	Context context = this.getApplicationContext();
    	final EditText hour = (EditText) findViewById(R.id.hour);
    	final EditText minutes = (EditText) findViewById(R.id.minutes);
    	final EditText alarm_num = (EditText) findViewById(R.id.alarm_number);
    	int hour_int = Integer.parseInt( hour.getText().toString() );
    	int minutes_int = Integer.parseInt( minutes.getText().toString() );
    	int alarm_number = Integer.parseInt( alarm_num.getText().toString() );
    	Log.i("past the string onversion", "past the string conversion");
    	if(alarm != null){
    		alarm.setOnetimeTimer(context, hour_int, minutes_int, false, alarm_number);
    	}else{
    		Toast.makeText(context, "Alarm is null", Toast.LENGTH_SHORT).show();
    	}
    }
    
	@Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.activity_widget_alarm_manager, menu);
        return true;
    }
	
	public void setAlarmText(View view) throws UnsupportedEncodingException, IOException{//called by save alarm button , writes 
    	Context context = this.getApplicationContext();
    	final EditText hour = (EditText) findViewById(R.id.hour);
    	final EditText minutes = (EditText) findViewById(R.id.minutes);
    	final EditText alarm_num = (EditText) findViewById(R.id.alarm_number);
    	final EditText alarm_dur = (EditText) findViewById(R.id.alarm_duration);
    	int hour_int = Integer.parseInt( hour.getText().toString() );
    	int minutes_int = Integer.parseInt( minutes.getText().toString() );
    	int alarm_number = Integer.parseInt( alarm_num.getText().toString() );
    	int alarm_duration = Integer.parseInt( alarm_dur.getText().toString() );
    	
    	String str = "";
    	String alarm_line = "";
    	int line_number = 0;
        FileInputStream in = null;
        FileOutputStream out = null;
        //File file = new File(".");
        //String s = "C:" + " \"ROM\" ";
        //String s = "C:\\Users\\rtack_000\\workspace\\FileTesting\\src\\filepack";
        // /C:/Users/rtack_000/workspace/FileTesting/bin/input.txt
        //getAbsolutePath();
        //File file = new File(s);
        URL url = AlarmManagerBroadcastReceiver.class.getClassLoader().getResource("alarmpack");
        String filepath ="/" + "C" + ":" + "/" + "Users" + "/" + "rtack_000"+ "/" + "Desktop" + "/" + 
        "code4Reference"+"/"+"Code4Reference"+"-"+"master"+"/"+"AndroidProjects"+"/"+"AlarmManagerExample"+
        		"/"+"src"+"/"+"alarmpack";
        //System.out.println(url.getPath()); 
        
        //File file = new File(url.getPath());
        File file = new File(filepath);
        
        for(String fileNames : file.list()) {
      	  //System.out.println(fileNames);
      	  if (/*fileNames.endsWith(".txt")*/ fileNames == "alarm list"){
      		  //System.out.println("its a java filename and it = " + fileNames);
  	      
      		//alarm1 time8:0 length20 days[M:Y,T:Y,W:Y,H:Y,F:Y,S:Y,U:Y]
  		      try {
  		         in = new FileInputStream(filepath+ "\\" + fileNames );
  		         //String ab = "C:\\Users\\rtack_000\\Documents\\t-25 ab interval moves by second breakdown.txt";
  		    	 //or you can use ./filename.txt if it is in binary of the package
  		    	 //You can use YourClassName.class.getResourceAsStream("Filename.txt"), but your text file
  		    	 //has to be in the same directory/package as your YourClassName file.
  		    	 //in = (FileInputStream) CopyFile.class.getResourceAsStream(fileNames);
  		    	 //System.out.println(in);
  		    	  //System.out.println(System.getProperty("user.dir"));
  		    	  //System.out.println(System.getProperty("java.class.path"));
  		    	  
  		         //in = new FileInputStream("./input.txt");
  		         //in = new FileInputStream("C:\Users\rtack_000\workspace\FileTesting\src\filepack\input.txt");
  		         //out = new FileOutputStream(url.getPath() + "\\" + "alarm output");
  		         
  		         /*
  		         Reader rd = new InputStreamReader(in, "USASCII");  // or whatever encoding you use
  		         while (true) {
  		             String command = readLine(rd );
  		             if (command .equals("RAW")) {
  		                 int length = Integer.parseInt(readLine(rd ));
  		                 byte[] data = readData(in , length);
  		                 
  		             }
  		         }
  		         */
  		         String line = "";
  		         String character = "";
  		         
  		         
  		         int c;
  		         
  		         while ((c = in.read()) != -1) {
  		        	//System.out.println(new String(new byte[]{ (byte)0x63 }, "US-ASCII"));
  		        	//System.out.println(new String(new byte[]{ (byte)c }, "US-ASCII"));
  		        	character = new String(new byte[]{ (byte)c }, "US-ASCII");
  		        	if (c == 13){ // new line byte = 13
  		        		//System.out.print( " this line is done");
  		        		//line = "";
  		        		line_number+=1;
  		        	//alarm1 time8:0 length20 days[M:Y,T:Y,W:Y,H:Y,F:Y,S:Y,U:Y]
  		        	}
  		        	//line+=character;
  		        	//System.out.print(character);
  		            //out.write(c);
  		        	str+=character; // will be the full text file
  		        	if(line_number == alarm_number){
  		        		alarm_line+=character;
  		        	}
  		         }
  		      }finally {
  		         if (in != null) {
  		            in.close();
  		         }
  		         if (out != null) {
  		            out.close();
  		         }
  		      }
  		      
		      if(line_number >= alarm_number){
		    	  line_number = 0;// we have to write 0 new lines in the output file
		    	  str.replace(alarm_line, "alarmALnumber timeALmin:ALhour lengthALduration days[M:Y,T:Y,W:Y,H:Y,F:Y,S:Y,U:Y]"); 
		      }
		      else{
		    	  line_number = alarm_number - line_number; // how many new lines we have to do in output file
		      }
		      
		      
      	  }
        }
        
        /*
    	int hour_int = Integer.parseInt( hour.getText().toString() );
    	int minutes_int = Integer.parseInt( minutes.getText().toString() );
    	int alarm_number = Integer.parseInt( alarm_num.getText().toString() );
    	int alarm_duration = Inte blah
    	String str = "";
    	String alarm_line = "";
    	*/
        
        alarm_line = "alarmALnumber timeALmin:ALhour lengthALduration days[M:Y,T:Y,W:Y,H:Y,F:Y,S:Y,U:Y]";
        str.replace("ALnumber",Integer.toString(alarm_number));
        str.replace("ALmin",Integer.toString(minutes_int));
        str.replace("ALhour",Integer.toString(hour_int));
        str.replace("ALduration",Integer.toString(alarm_duration));
        //alarm1 time8:0 length20 days[M:Y,T:Y,W:Y,H:Y,F:Y,S:Y,U:Y]
        //now working with out txt, same text just writing to it instead of grabbing form it
        out = null;
        in = null;
		file = null;	      
	    file = new File(url.getPath());  
		for(String fileNames : file.list()) {
			      	  //System.out.println(fileNames);
			  if (/*fileNames.endsWith(".txt")*/ fileNames == "alarm list"){
			      		  //System.out.println("its a java filename and it = " + fileNames);
			  	      
			      		//alarm1 time8:0 length20 days[M:Y,T:Y,W:Y,H:Y,F:Y,S:Y,U:Y]
			  	  try {
			  		  out = new FileOutputStream(url.getPath() + "\\" + fileNames);
			  		  for (int i = 0; i < str.length(); i++){
			  			  char b = str.charAt(i);
			  			  int char_2byte = Character.getNumericValue(b);
			  			  
			  		  }
			  		  
			      }
			  	  finally {
		  		         if (in != null) {
		  		            in.close();
		  		         }
		  		         if (out != null) {
		  		            out.close();
		  		         }
		  		  }
		          //alarm1 time8:0 length20 days[M:Y,T:Y,W:Y,H:Y,F:Y,S:Y,U:Y]
	      	 }  //end of if
	    }//end of for
		
	}
}
        
      	 
