package com.example.speed;

//import android.R.integer;
import android.location.LocationListener;
import android.location.LocationManager;
import android.location.Location;
import android.media.MediaPlayer;
import android.os.Bundle;
import android.os.Message;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.support.v4.app.NavUtils;
import android.support.v4.app.TaskStackBuilder;
import android.util.Log;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Chronometer;
import android.os.SystemClock;
import android.view.View.OnClickListener;
import android.view.MenuItem;
import 	android.os.Handler;
import android.content.SharedPreferences.Editor;

import java.util.Timer;

import android.app.ActionBar;

public class Setting extends MainActivity/*extends Activity*/{
	
	
	View current_view;

	@Override
	public void onCreate(Bundle savedInstanceState) {
	    super.onCreate(savedInstanceState);
	    setContentView(R.layout.settings);
	    
	    
	    //getActionBar().setDisplayHomeAsUpEnabled(true); //added 1/19/14 , 1:09PM
	    
	    
	    // Get the message from the intent
	    current_view = getCurrentFocus();
	    getActionBar().setDisplayHomeAsUpEnabled(true);

	    // Create the text view
	    //TextView textView = new TextView(this);
	    //textView.setTextSize(40);
	    //textView.setText(message);

	    // Set the text view as the activity layout
	    //setContentView(R.layout.settings);
		final Button miles_b = (Button) findViewById(R.id.miles_button);
		
		final Button meters_b = (Button) findViewById(R.id.meter_button);
		
		
		final Button set = (Button) findViewById(R.id.set_button);
		final EditText interval_text = (EditText) findViewById(R.id.enter_the_interval);
		final TextView unit_mile = (TextView) findViewById(R.id.current_unit);//mile unit
		final TextView unit_meter = (TextView) findViewById(R.id.current_unit_2);//meter unit
		final EditText minute_input = (EditText) findViewById(R.id.minute_input);
		final EditText second_input = (EditText) findViewById(R.id.second_input);
		final EditText d_q_enter = (EditText) findViewById(R.id.distance_question_enter);
		
		in_setting = true;
		
		setupMB();
	    
	    
	    
	}	
	
	
	
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		//getMenuInflater().inflate(R.menu.main, menu);
		//return true;
	    MenuInflater inflater = getMenuInflater();
	    inflater.inflate(R.menu.setting_back_actions, menu);
	    //return super.onCreateOptionsMenu(menu);
	    return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
	    // Handle presses on the action bar items
		
	    switch (item.getItemId()) {
	    
	    	case android.R.id.home:
	            Intent upIntent = NavUtils.getParentActivityIntent(this);
	            if (NavUtils.shouldUpRecreateTask(this, upIntent)) {
	                // This activity is NOT part of this app's task, so create a new task
	                // when navigating up, with a synthesized back stack.
	                TaskStackBuilder.create(this)
	                        // Add all of this activity's parents to the back stack
	                        .addNextIntentWithParentStack(upIntent)
	                        // Navigate up to the closest parent
	                        .startActivities();
	            } else {
	                // This activity is part of this app's task, so simply
	                // navigate up to the logical parent activity.
	                NavUtils.navigateUpTo(this, upIntent);
	            }
	            return true;
            
	        case R.id.back:
	        	
	        	//i think below is the reason the values are not staying!!!!!!
	        	
	    		
	    		//debug modeLog.i("DemoButtonApp", "leaving settingss");
	    		//debug modeLog.i("DemoButtonApp", "mile bool is " + mile_button_bool);
	    		//debug modeLog.i("DemoButtonApp", "meter bool is " + meter_button_bool);
	        	
	        	//in_setting = false;
	        	
	        	//if (new_intent_bool == false){
	        		Intent intent = new Intent();
	        		//new_intent_bool =true;// we don't need to create a new intent each time we call settings, so we can keep info
	        	//}
	        	//might need to hide if above and Intent declaration
                
	        	//Intent intent = new Intent();
	        	
	        	
	        	intent.putExtra("result", 1); // just added this
	        	
	        	
                setResult(RESULT_OK, intent);
                
                
                finish();
                //moveTaskToBack();
                //NavUtils.navigateUpFromSameTask(this);
                
	            return true;
	            
	        //below was added 1/19/14 , 1:09PM
	        //case android.R.id.home:
	        //    NavUtils.navigateUpFromSameTask(this); //
	        //    return true;
	        	
	            
	        default:
	            return super.onOptionsItemSelected(item);
	    }
	}	
	
	
	
    public Setting() {
		
		//setContentView(R.layout.settings);
		
	    //ActionBar actionBar = getActionBar();
	    //actionBar.hide();

	    //actionBar.show();
	    //popupWindow = new PopupWindow(this, 0); //help popup
	    //popupWindow_done = new PopupWindow(this, 1); //done popup
	    //actionBar.setSubtitle("subtitle");
	    //actionBar.setTitle("title"); 
		
		//setupMB();
	}

	
	
	private void setupMB() {
		//setContentView(R.layout.settings);
		
		//debug modeLog.i("DemoButtonApp", "setting up message buttons in settings");
		//debug modeLog.i("DemoButtonApp", "mile bool is " + mile_button_bool);
		//debug modeLog.i("DemoButtonApp", "meter bool is " + meter_button_bool);
		final Button miles_b = (Button) findViewById(R.id.miles_button);
		
		final Button meters_b = (Button) findViewById(R.id.meter_button);
		
		final Button set = (Button) findViewById(R.id.set_button);
		final EditText interval_text = (EditText) findViewById(R.id.enter_the_interval);
		final TextView unit_mile = (TextView) findViewById(R.id.current_unit);//mile unit
		final TextView unit_meter = (TextView) findViewById(R.id.current_unit_2);//meter unit
		final EditText minute_input = (EditText) findViewById(R.id.minute_input);
		final EditText second_input = (EditText) findViewById(R.id.second_input);
		final EditText d_q_enter = (EditText) findViewById(R.id.distance_question_enter);
		
		//this doesn't work i dont think it gets recreated each time you switch back to it
		if(mile_button_bool){
			miles_b.setVisibility(View.GONE); // if current unit is miles hide the miles button, cuz you can't change to miles, its already miles idiot
			unit_meter.setVisibility(View.GONE);//hide meter unit, initially in miles
			
		}
		else{
			meters_b.setVisibility(View.GONE); // if curent unit is meters hide the meters button, so you can only see change to miles
			unit_mile.setVisibility(View.GONE);//hide mile unit, currently in meters
		}
		
		
		//miles_b.setVisibility(View.GONE); // hide the miles button because it is default
		//unit_meter.setVisibility(View.GONE);//hide meter unit, initially in miles
		
		
		miles_b.setOnClickListener(new View.OnClickListener() {
			//miles button clicked actions
			@Override
			public void onClick(View v) {
				meters_b.setVisibility(View.VISIBLE);
				miles_b.setVisibility(View.GONE);
				//debug modeLog.i("DemoButtonApp", "you clicked the miles button!");
				unit_meter.setVisibility(View.GONE);//miles is current hide meter unit
				unit_mile.setVisibility(View.VISIBLE);
				//unit_text.setText("miles",TextView.BufferType.EDITABLE);
				meter_button_bool = false; 
				mile_button_bool = true; // display in kilometers not miles
			}
		});
		
		meters_b.setOnClickListener(new View.OnClickListener() {
			//meter button clicked actions
			@Override
			public void onClick(View v) {
				miles_b.setVisibility(View.VISIBLE);
				meters_b.setVisibility(View.GONE);
				unit_mile.setVisibility(View.GONE); //meters is current hide miles
				unit_meter.setVisibility(View.VISIBLE);
				//debug modeLog.i("DemoButtonApp", "you clicked the meters button!");
				mile_button_bool = false; 
				meter_button_bool = true; // display in kilometers not miles
				//unit_text.setText("km's",TextView.BufferType.EDITABLE);
			}
		});
		

		set.setOnClickListener(new View.OnClickListener() {
			//set interval button clicked
			@Override
			public void onClick(View v) {
				//String howfar = ""; // how far to go? convert that text to a string
				//String howfast_min = ""; // how fast ? in minutes text to a string
				//String howfast_sec = ""; // how fast? in sec text to a string
				//long time_total = 0;//total time you want to run the howfar distanc in
				//interval_variable 
				interval_string = interval_text.getText().toString();
				String temp = "blank"; //for some reason checking if interval_string == "" doenst work?
				String b = "";
				if (interval_string.length() >0 ){
					//if no interval entered parseInt will cause the program to crash if you 
					//you try to parse somethign that was not entered, so skip parsing if blank
					interval_int = Integer.parseInt(interval_string);
				}
				interval_paused = interval_int*1000;//update interval
				
				howfar = d_q_enter.getText().toString(); //distance you want to go, convert to str
				if (howfar.length() > 0){
					//same as if statement above, to account for nothing being entered
					distance_total = Float.parseFloat(howfar); //now to float, (initally 1 mile )
					//distance_total = Float.parseFloat(howfar); //now to float, (initally 1 mile )
					if (miles_b.getVisibility() == View.GONE){ //if currently in miles
						double miles2meters = 1609.34; // 1 mile = 1609.34
						distance_total = distance_total*miles2meters;// convert miles total to meters
					}
					else{//if not currently in miles it must be in kilometers
						distance_total = distance_total*1000; // 1 kilometer = 1000 meters, convert km to meters
					}
				}
				
				howfast_min = minute_input.getText().toString();// # mins you want to go the total dist in
				if (howfast_min.length() >0){
					fastmin = Long.parseLong(howfast_min); //conver mins to long
				}
				
				howfast_sec = second_input.getText().toString();// # sec you want to go the total dist in
				if (howfast_sec.length() >0){
					fastsec = Long.parseLong(howfast_sec); //conver sec to long
				}
				time_total = (fastmin*60) + fastsec; //minutes converted to seconds+seconds
				
				//to me it looks like these below need to be static 
				//time_total
				//interval_paused
				//distance total
				
				//debug modeLog.i("DemoButtonApp", "you clicked the set interval button!" + interval_int);
			}
		});
		
		
		
		
		}
}
		
	



