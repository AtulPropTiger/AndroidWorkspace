package alarmpack;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URL;

import alarmpack.R;
import android.media.AudioManager;
import android.media.Ringtone;
import android.media.RingtoneManager;
import android.net.Uri;
import android.os.Bundle;
import android.app.Activity;
import android.content.Context;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.EditText;
import android.widget.Toast;
import android.support.v4.app.NavUtils;



//removing all the view part from read , see if it matters!!!!!!!!!!!!!!!!!!! 922PM march 31 2014

public class AlarmManagerActivity extends Activity {

	public Ringtone r;
	private AlarmManagerBroadcastReceiver alarm;
	private String file = "mydata11";
	private String data;
	int line_number = 0;
	int alarm_number ;
	String str = "";
	String alarm_line = "";
	Context globalContext;
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_alarm_manager);
        alarm = new AlarmManagerBroadcastReceiver();
        Uri notification = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);
        r = RingtoneManager.getRingtone(getApplicationContext(), notification);
        AudioManager mgr=null;
        globalContext = getApplicationContext();
        mgr=(AudioManager) getSystemService(Context.AUDIO_SERVICE);
    }
    
    public static Ringtone getRingtone(Context context){
        Uri alarm_ring = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_ALARM);
        return RingtoneManager.getRingtone(context, alarm_ring);
    }
    

    
    @Override
	protected void onStart() {
		super.onStart();
	}

    public void startRepeatingTimer(View view) {
    	Context context = this.getApplicationContext();
    	if(alarm != null){
    		alarm.SetAlarm(context);
    	}else{
    		//toast.makeText(context, "Alarm is null", Toast.LENGTH_SHORT).show();
    	}
    }
    
    public void cancelRepeatingTimer(View view){
    	Context context = this.getApplicationContext();
    	if(alarm != null){
    		alarm.CancelAlarm(context);
    	}else{
    		//toast.makeText(context, "Alarm is null", Toast.LENGTH_SHORT).show();
    	}
    }
    
    public void onetimeTimer(View view) /*throws IOException*/{
    	Context context = this.getApplicationContext();
    	EditText hour = (EditText) findViewById(R.id.hour);
    	EditText minutes = (EditText) findViewById(R.id.minutes);
    	EditText alarm_num = (EditText) findViewById(R.id.alarm_number);
    	int hour_int = Integer.parseInt( hour.getText().toString() );
    	int minutes_int = Integer.parseInt( minutes.getText().toString() );
    	alarm_number = Integer.parseInt( alarm_num.getText().toString() );
    	//Log.i("past the string onversion", "past the string conversion");
    	
    	if(alarm != null){
    		//alarm.setOnetimeTimer(context, hour_int, minutes_int, false, alarm_number, getAlarmString(view));
    		Toast.makeText(context, "minutes = " + minutes_int + " hours = " + hour_int, Toast.LENGTH_SHORT).show();
    		alarm.setOnetimeTimer(context, hour_int, minutes_int, false, alarm_number, "not using this for now");
    	}else{
    		//toast.makeText(context, "Alarm is null", Toast.LENGTH_SHORT).show();
    	}
    }
    
	@Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.activity_widget_alarm_manager, menu);
        return true;
    }
	
	public void setAlarmText(View view) throws UnsupportedEncodingException, IOException{//called by save alarm button , writes 
    	Context context = this.getApplicationContext();
    	EditText hour = (EditText) findViewById(R.id.hour);
    	EditText minutes = (EditText) findViewById(R.id.minutes);
    	EditText alarm_num = (EditText) findViewById(R.id.alarm_number);
    	EditText alarm_dur = (EditText) findViewById(R.id.alarm_duration);
    	int hour_int = Integer.parseInt( hour.getText().toString() );
    	int minutes_int = Integer.parseInt( minutes.getText().toString() );
    	int alarm_number = Integer.parseInt( alarm_num.getText().toString() );
    	int alarm_duration = Integer.parseInt( alarm_dur.getText().toString() );
        alarm_line = "alarmALnumber timeALhour:ALmin lengthALduration days[M:Y,T:Y,W:Y,H:Y,F:Y,S:Y,U:Y]";
        //toast.makeText(getBaseContext(),"alarm at the beginning , it equals : " + alarm_line,Toast.LENGTH_SHORT).show();
        alarm_line = alarm_line.replace("ALnumber",Integer.toString(alarm_number));
        alarm_line = alarm_line.replace("ALmin",Integer.toString(minutes_int));
        alarm_line = alarm_line.replace("ALhour",Integer.toString(hour_int));
        alarm_line = alarm_line.replace("ALduration",Integer.toString(alarm_duration));
        //toast.makeText(getBaseContext(),"alarm after at the begginning " + alarm_line,Toast.LENGTH_SHORT).show();
  		str = read(false); //the file read from storage
  		      
		if(line_number >= alarm_number){
		    	  line_number = 0;// we have to write 0 new lines in the output file
		    	  //str.replace(alarm_line, "alarmALnumber timeALmin:ALhour lengthALduration days[M:Y,T:Y,W:Y,H:Y,F:Y,S:Y,U:Y]");
		}
		else{
		    	  line_number = alarm_number - line_number; // how many new lines we have to do in output file
		    	  String eol = System.getProperty("line.separator");  // should just be able to use \n , being safe
		    	  /*for (int i = 0; i < line_number ; i++){
		    		  str = str.concat(eol);
		    	  }*/
		    	  //alarm_line = "alarmALnumber timeALmin:ALhour lengthALduration days[M:Y,T:Y,W:Y,H:Y,F:Y,S:Y,U:Y]";
		    	  //str = str.concat(alarm_line);
		    	  
		}
		////toast.makeText(getBaseContext(),"alarm just set = " + alarm_line,Toast.LENGTH_SHORT).show();
		//toast.makeText(getBaseContext(),"alarm just before appendOrReplace, it = " + alarm_line,Toast.LENGTH_SHORT).show();
		str = appendOrReplaceAlarm(alarm_line, str, alarm_number);
        /*
        alarm_line = "alarmALnumber timeALhour:ALmin lengthALduration days[M:Y,T:Y,W:Y,H:Y,F:Y,S:Y,U:Y]";
        //str = str.replace("ALnumber",Integer.toString(alarm_number));
        //str = str.replace("ALmin",Integer.toString(minutes_int));
        //str = str.replace("ALhour",Integer.toString(hour_int));
        //str = str.replace("ALduration",Integer.toString(alarm_duration));
        //below strictly for testing with toast message
        alarm_line = alarm_line.replace("ALnumber",Integer.toString(alarm_number));
        alarm_line = alarm_line.replace("ALmin",Integer.toString(minutes_int));
        alarm_line = alarm_line.replace("ALhour",Integer.toString(hour_int));
        alarm_line = alarm_line.replace("ALduration",Integer.toString(alarm_duration));
        */
        //Log.i(" string alarm notes = ", "string alarm notes = " + str);
        //toast.makeText(getBaseContext(),"alarm just set = " + alarm_line,Toast.LENGTH_SHORT).show();
        data = str;
        save(view);
        //alarm1 time8:0 length20 days[M:Y,T:Y,W:Y,H:Y,F:Y,S:Y,U:Y]
        //now working with out txt, same text just writing to it instead of grabbing form it
		
	}
	
	public void save(View view){
		      // data = et.getText().toString();
			  //String data = "alarmfile";
		      try {
		        FileOutputStream fOut = openFileOutput(file,MODE_WORLD_READABLE);
		    	  //FileOutputStream fOut = openFileOutput(file,MODE_APPEND);
		    	  
		         fOut.write(data.getBytes(), 0 /*data.getBytes().length/8*/, data.getBytes().length);
		         //fOut.write(data.getBytes());
		         
		         fOut.close();
		         //toast.makeText(getBaseContext(),"file saved",Toast.LENGTH_LONG).show();
		      } catch (Exception e) {
		         // TODO Auto-generated catch block
		    	  //toast.makeText(getBaseContext(),"EXCEPTION in save!!", Toast.LENGTH_SHORT).show();
		         e.printStackTrace();
		      }
	}
	   
	public String read(Boolean showToast){ // figure out if this is the one that trigger son the touch, i think it is one
									// below that does trigger
		      String temp="";
		      try{
		         FileInputStream fin = globalContext.openFileInput(file); // just changed 9:13 PM march 31 2014
		         int c;
		         //String temp="";
		         String line = "";
		         String character = "";
		         while( (c = fin.read()) != -1){
		            temp = temp + Character.toString((char)c);
		            
  		        	character = new String(new byte[]{ (byte)c }, "US-ASCII");
  		        	if (c == 13){ // new line byte = 13
  		        		//System.out.print( " this line is done");
  		        		//line = "";
  		        		line_number+=1;
  		        	//alarm1 time8:0 length20 days[M:Y,T:Y,W:Y,H:Y,F:Y,S:Y,U:Y]
  		        	}
  		        	//line+=character;
  		        	//System.out.print(character);
  		            //out.write(c);
  		        	str+=character; // will be the full text file
  		        	/*if(line_number == alarm_number){
  		        		alarm_line+=character;
  		        	}*/
		         }
		         if (showToast){
		        	 Toast.makeText(getBaseContext(),"temp = " + temp, Toast.LENGTH_SHORT).show();
		        	 Log.i(" read = ", "read = " + temp);
		         }
		      }catch(Exception e){
			         //toast.makeText(getBaseContext(),"EXCEPTION in read!!", Toast.LENGTH_SHORT).show();
		      }
		      return temp;
	}
	
	public void readCurrent(View view){
		read(true); // make a boolean parameter for read so that you can make a toast of all the saved alarms
	}
	
	//for use with setAlarmText, takes in an the new alarm that you want to add, the .txt file that contains all 
	//alarms, the alarm number that you want to add. If you add an alarm 3 it will look to see if there is already
	//an alarm 3 and if there is it will replace it with the new alarm, otherwise it will just add an alarm 3 to
	//the .txt that keeps all of the saved alarms.
	public String appendOrReplaceAlarm(String newAlarm, String oldFile, int alarmNumber){
		String alarmNumStr = "alarm" + Integer.toString(alarmNumber);
		if (oldFile.contains( alarmNumStr )){
			int start = oldFile.indexOf(alarmNumStr);
			int end = oldFile.indexOf("]", start); //get the full length of the old alarm string
			String oldAlarm = oldFile.substring(start, end +1);
			Log.i(" old and new", "oldAlarm = " + oldAlarm + " newAlarm = " + newAlarm);
			return oldFile.replace(oldAlarm, newAlarm);
			
		}
		else{
			//toast.makeText(getApplicationContext(), "we are appending !!", Toast.LENGTH_SHORT).show();
			return oldFile.concat(newAlarm);

		}
		
	}
	
	// whatever user currently has typed in for alarm number this function will take that number and return the 
	//alarm string associated with it
	public String getAlarmString(View view){
    	EditText alarm_num = (EditText) findViewById(R.id.alarm_number);
    	alarm_number = Integer.parseInt( alarm_num.getText().toString() );
    	String alarmNumStr = "alarm" + Integer.toString(alarm_number);
    	String oldFile = read(false);
		if (oldFile.contains( alarmNumStr )){
			int start = oldFile.indexOf(alarmNumStr);
			int end = oldFile.indexOf("]", start); //get the full length of the old alarm string
			return oldFile.substring(start, end); //alarm string we need to pull out
		}
		else{
			//toast.makeText(getApplicationContext(), "There is no Alarm " + alarm_number + " saved!", Toast.LENGTH_SHORT).show();
			return ""; // no alarm x saved
		}
		
	}
		   
}
        
      	 
